{"version":3,"sources":["../src/PRTGAPIService.js"],"names":["PRTGAPIService","alertSrv","backendSrv","PRTGAPI","api_url","username","passhash","cacheTimeoutMinutes","tzAutoAdjust","url","lastId","cache","tzAutoAdjustValue","performPRTGAPIRequest","then","jsClock","response","localTs","Date","now","console","log","Math","round","item","timestamp","hashValue","Promise","resolve","data","getCache","str","hash","length","idx","chr","charCodeAt","val","slice","unixtime","dt","getFullYear","pad","getMonth","getDate","getHours","getMinutes","getSeconds","join","method","params","queryString","options","inCache","setCache","datasourceRequest","reject","message","groups","devices","sensors","channels","values","sensordata","messages","Version","XMLXform","error","status","statusText","groupFilter","deviceFilter","items","queryStr","invert","filterItems","match","_","trim","split","push","filter","findItem","group","device","sensor","name","utils","isRegex","rex","buildRegex","result","test","includes","performGroupSuggestQuery","filterQuery","hostFilter","performDeviceSuggestQuery","getGroups","filters","each","filteredGroups","sensorFilter","getHosts","hosts","host","performSensorSuggestQuery","getSensors","promises","map","objid","all","channel","sensor_raw","flatten","channelFilter","invertChannelFilter","getAllItems","target","getItems","dateFrom","dateTo","hours","avg","getPRTGDate","history","results","histdata","rCnt","testdata","chanIndex","value_raw","RegExp","escapeRegex","iter","prtgDate","datetime_raw","Number","text","datetime","value","from","to","sensorId","events","time","title","parent","type","angular","module","factory"],"mappings":"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","file":"PRTGAPIService.js","sourcesContent":["import angular from \"angular\";\r\nimport _ from \"lodash\";\r\nimport * as utils from \"./utils\";\r\nimport { XMLXform } from \"./xmlparser\";\r\n/**\r\n * PRTG API Service\r\n * Implements the high level functions that process data from PRTG\r\n */\r\n\r\n/** @ngInject */\r\nfunction PRTGAPIService(alertSrv, backendSrv) {\r\n  class PRTGAPI {\r\n    constructor(api_url, username, passhash, cacheTimeoutMinutes, tzAutoAdjust) {\r\n      this.url = api_url;\r\n      this.username = username;\r\n      this.passhash = passhash;\r\n      this.lastId = false;\r\n      this.cache = {};\r\n      this.cacheTimeoutMinutes = cacheTimeoutMinutes;\r\n      this.alertSrv = alertSrv;\r\n      this.backendSrv = backendSrv;\r\n      this.tzAutoAdjust = tzAutoAdjust;\r\n      this.tzAutoAdjustValue = 0;\r\n      if (tzAutoAdjust) {\r\n        this.performPRTGAPIRequest(\"status.json\").then(response => { \r\n          const jsClock =  response.jsClock; \r\n          const localTs = Date.now();\r\n          console.log (\"Remote Clock: \" + jsClock + \"; Local Clock: \" + localTs);\r\n          this.tzAutoAdjustValue = Math.round(((localTs / 1000) - jsClock),0) * 1000\r\n          console.log(\"Auto Adjust Value: \" + this.tzAutoAdjustValue);\r\n        })\r\n      }\r\n      \r\n    }\r\n\r\n    /**\r\n     * Tests whether a url has been stored in the cache.\r\n     * Returns boolean true | false\r\n     * \r\n     * Also actually implements deletion. TODO: Test Browser Cache API\r\n     * \r\n     * @param url \r\n     * @return boolean\r\n     */\r\n    inCache(url) {\r\n      for(var item in this.cache) {\r\n        if (Date.now() - this.cache[item].timestamp > (this.cacheTimeoutMinutes * 60000)) {\r\n          console.log(\"Expired Cache Object \" + item + \" (timestamp: \" + this.cache[item].timestamp + \"). Deleting...\")\r\n          delete(this.cache[item])\r\n        }\r\n      }\r\n      \r\n      if (this.cache[this.hashValue(url)]) {\r\n        console.log(\"Cache hit for url=\"+url)\r\n        return true\r\n      }\r\n      console.log(\"Cache miss for url=\" + url)\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * retrieves a cached data result from the cache\r\n     *\r\n     * @param  url the URL of the request\r\n     * @return Promise\r\n     */\r\n    getCache(url) {\r\n      return Promise.resolve(this.cache[this.hashValue(url)].data);\r\n    }\r\n\r\n    /**\r\n     * stores a data result in the cache\r\n     *\r\n     * @param  url the URL of the request\r\n     * @param  data the response.data object of the request\r\n     * @return promise\r\n     */\r\n    setCache(url, data) {\r\n      this.cache[this.hashValue(url)] = {\"timestamp\": Date.now(), \"data\": data};\r\n      return this.getCache(url);\r\n    }\r\n\r\n    /**\r\n     * simple clone of a java hash value\r\n     * Kevin \"Pancake\" (http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/)\r\n     *\r\n     * @param  e string to hash\r\n     * @return int32\r\n     */\r\n    hashValue(str) {\r\n      let hash = 0;\r\n      if (str.length === 0) return hash;\r\n      for (let idx = 0; idx < str.length; idx++) {\r\n        const chr = str.charCodeAt(idx);\r\n        hash = (hash << 5) - hash + chr;\r\n        hash = hash & hash; // Convert to 32bit integer\r\n      }\r\n      return hash;\r\n    }\r\n\r\n    /**\r\n     * pad date parts and optionally add one\r\n     */\r\n    pad(idx, val) {\r\n      if (val) return (\"0\" + (idx + 1)).slice(-2);\r\n      return (\"0\" + idx).slice(-2);\r\n    }\r\n\r\n    /**\r\n     * convert a UNIX timestamp into a PRTG date string for queries\r\n     * YYYY-MM-DD-HH-MM-SS\r\n     * \r\n     * @param unixtime UNIX format timestamp\r\n     */\r\n    getPRTGDate(unixtime) {\r\n      const dt = new Date(unixtime * 1000);\r\n      const str = [\r\n        dt.getFullYear(),\r\n        this.pad(dt.getMonth(), true),\r\n        this.pad(dt.getDate()),\r\n        this.pad(dt.getHours()),\r\n        this.pad(dt.getMinutes()),\r\n        this.pad(dt.getSeconds())\r\n      ];\r\n      return str.join(\"-\");\r\n    }\r\n\r\n    /**\r\n     * Request data from PRTG API\r\n     *\r\n     * @param  method the API method (e.g., table.json)\r\n     * @param  params HTTP query string query parameters\r\n     * @return promise\r\n     */\r\n    performPRTGAPIRequest(method, params) {\r\n      const queryString =\r\n        \"username=\" +\r\n        this.username +\r\n        \"&passhash=\" +\r\n        this.passhash +\r\n        \"&\" +\r\n        params;\r\n      const options = {\r\n        method: \"GET\",\r\n        url: this.url + \"/\" + method + \"?\" + queryString\r\n      };\r\n\r\n      if (this.inCache(options.url)) {\r\n        return this.getCache(options.url);\r\n      } else {\r\n        return this.setCache(\r\n          options.url,\r\n          this.backendSrv.datasourceRequest(options).then(\r\n            response => {\r\n              if (!response.data) {\r\n                return Promise.reject({\r\n                  message: \"Response contained no data\"\r\n                });\r\n              }\r\n\r\n              if (response.data.groups) {\r\n                return response.data.groups;\r\n              } else if (response.data.devices) {\r\n                return response.data.devices;\r\n              } else if (response.data.sensors) {\r\n                return response.data.sensors;\r\n              } else if (response.data.channels) {\r\n                return response.data.channels;\r\n              } else if (response.data.values) {\r\n                return response.data.values;\r\n              } else if (response.data.sensordata) {\r\n                return response.data.sensordata;\r\n              } else if (response.data.messages) {\r\n                return response.data.messages;\r\n              } else if (response.data.Version) {\r\n                return response.data;\r\n              } else {\r\n                //All else must be XML from table.xml so throw it into the transformer and get JSON back.\r\n                if (response.data == \"Not enough monitoring data\" || response.data.length < 200) {\r\n                  //Fixes Issue #5 - reject the promise with a message. The message is displayed instead of an uncaught exception.\r\n                  return Promise.reject({\r\n                    message:\r\n                      \"Not enough monitoring data or zero events returned.\\n\\nRequest:\\n\" +\r\n                      params +\r\n                      \"\\n\"\r\n                  });\r\n                }\r\n                return new XMLXform(method, response.data);\r\n              }\r\n            },\r\n            error => {\r\n              return Promise.reject(error.status + \": \" + error.statusText);\r\n            }\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Only used in connection testing\r\n     * \r\n     * @return Promise\r\n     */\r\n    getVersion() {\r\n      return this.performPRTGAPIRequest(\"status.json\").then(function(response) {\r\n        if (!response) {\r\n          return \"ERROR. No response.\";\r\n        } else {\r\n          return response.Version;\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Authenticate to the PRTG interface\r\n     * Only used in connection testing because PRTG API is sessionless.\r\n     * \r\n     * @return Promise\r\n     */\r\n    /*    performPRTGAPILogin() {\r\n      const username = this.username;\r\n      const passhash = this.passhash;\r\n      const options = {\r\n        method: \"GET\",\r\n        url:\r\n          this.url +\r\n          \"/getstatus.htm?id=0&username=\" +\r\n          username +\r\n          \"&passhash=\" +\r\n          passhash\r\n      };\r\n      return this.backendSrv.datasourceRequest(options).then(response => {\r\n        this.passhash = response;\r\n        return response;\r\n      });\r\n    }\r\n    */\r\n\r\n    /**\r\n     * Query API for list of groups\r\n     *\r\n     * @return Promise - JSON result set\r\n     */\r\n    performGroupSuggestQuery() {\r\n      const params =\r\n        \"content=groups&count=9999&columns=objid,group,probe,tags,active,status,message,priority\";\r\n      return this.performPRTGAPIRequest(\"table.json\", params);\r\n    }\r\n\r\n    /**\r\n     * Query API for list of devices\r\n     * @param {string} groupFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @return Promise - JSON result set\r\n     */\r\n    performDeviceSuggestQuery(groupFilter) {\r\n      let params =\r\n        \"content=devices&count=9999&columns=objid,device,group,probe,tags,active,status,message,priority\";\r\n      if (groupFilter) {\r\n        params += \",group\" + groupFilter;\r\n      }\r\n      return this.performPRTGAPIRequest(\"table.json\", params);\r\n    }\r\n\r\n    /**\r\n     * Query API for list of sensors bound to a given device\r\n     * @param {string} deviceFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @return promise - JSON result set\r\n     */\r\n    performSensorSuggestQuery(deviceFilter) {\r\n      let params =\r\n        \"content=sensors&count=9999&columns=objid,sensor,device,group,probe,tags,active,status,message,priority\";\r\n      if (deviceFilter) {\r\n        params += deviceFilter;\r\n      }\r\n        \r\n      return this.performPRTGAPIRequest(\"table.json\", params);\r\n    }\r\n\r\n    /**\r\n     * Filter a PRTG collection against a filter string \r\n     * \r\n     * @param {collection} items - PRTG Data object \r\n     * @param {string} queryStr - Query filter, raw string, comma separated strings, or regular expression pattern\r\n     * @param {boolean} invert - when set to boolean true, negates the return value. \r\n     * @return {boolean} result of text expression\r\n     */\r\n    filterQuery(items, queryStr, invert = false) {\r\n      /**\r\n       * group device sensor includes properties:\r\n       * objid: num\r\n       * sensor: Name\r\n       * device: Device name\r\n       * group: Group name\r\n       * tags: comma separated\r\n       * active: true|false\r\n       * active_raw: -1 for true? wtf\r\n       * status: Status text\r\n       * status_raw: number\r\n       * message: html message\r\n       * message_raw: text message\r\n       * priority: number 1-5\r\n       */\r\n      let filterItems = [];\r\n      if (queryStr.match(/{[^{}]+}/g)) {\r\n        filterItems = _.trim(queryStr, \"{}\").split(\",\");\r\n      } else {\r\n        filterItems.push(queryStr);\r\n      }\r\n      return _.filter(items, item => {\r\n        let findItem;\r\n        if (item.group && !item.device) {\r\n          findItem = item.group;\r\n        } else if (item.device && !item.sensor) {\r\n          findItem = item.device;\r\n        } else if (item.sensor && !item.name) {\r\n          findItem = item.sensor;\r\n        } else if (item.name) {\r\n          findItem = item.name;\r\n        } else {\r\n          return false;\r\n        }\r\n        if (utils.isRegex(queryStr)) {\r\n          const rex = utils.buildRegex(queryStr);\r\n          const result = rex.test(findItem);\r\n          if (invert) {\r\n            return !result;\r\n          }\r\n          return result;\r\n        }\r\n        if (filterItems.length === 0) {\r\n          return true;\r\n        }\r\n        if (invert) {\r\n          return !filterItems.includes(findItem);\r\n        }\r\n        return filterItems.includes(findItem);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Retrive groups and filter with an optional filter string\r\n     * \r\n     * @param {string} groupFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @return {collection} - filtered PRTG data object\r\n     */\r\n    getGroups(groupFilter = \"/.*/\") {\r\n      return this.performGroupSuggestQuery().then(groups => {\r\n        return this.filterQuery(groups, groupFilter);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Retrieve hosts and filter with an optional filter string.\r\n     * \r\n     * @param {*} groupFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @param {*} hostFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @return {collection} - filtered PRTG data object\r\n     */\r\n    getHosts(groupFilter = \"/.*/\", hostFilter = \"/.*/\") {\r\n      //this is kind of silly but no need to include filter_group params if you include all...\r\n      if (groupFilter == \"/.*/\") {\r\n        return this.performDeviceSuggestQuery().then(devices => {\r\n          return this.filterQuery(devices, hostFilter);\r\n        });\r\n      } else {\r\n        return this.getGroups(groupFilter).then(filteredGroups => {\r\n          const filters = [];\r\n          _.each(filteredGroups, group => {\r\n            filters.push(\"filter_group=\" + group.group);\r\n          });\r\n\r\n          return this.performDeviceSuggestQuery(\r\n            \"&\" + filters.join(\"&\")\r\n          ).then(devices => {\r\n            return this.filterQuery(devices, hostFilter);\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Retrieve sensors and filter with an optional filter string.\r\n     * \r\n     * @param {string} groupFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @param {string} hostFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @param {string} sensorFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @return {collection} - filtered PRTG data object\r\n     */\r\n    getSensors(\r\n      groupFilter = \"/.*/\",\r\n      hostFilter = \"/.*/\",\r\n      sensorFilter = \"/.*/\"\r\n    ) {\r\n      return this.getHosts(groupFilter, hostFilter).then(hosts => {\r\n        const filters = [];\r\n        _.each(hosts, host => {\r\n          filters.push(\"filter_device=\" + host.device);\r\n        });\r\n        if (hostFilter == \"/.*/\" && groupFilter == \"/.*/\") {\r\n          return this.performSensorSuggestQuery().then(sensors => {\r\n            return this.filterQuery(sensors, sensorFilter);\r\n          });\r\n        } else {\r\n          return this.performSensorSuggestQuery(\r\n            \"&\" + filters.join(\"&\")\r\n          ).then(sensors => {\r\n            return this.filterQuery(sensors, sensorFilter);\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Retrieve full data object with channel definitions using an optional filter string\r\n     * \r\n     * @param {*} groupFilter - raw string, comma separated strings, or regular expression pattern \r\n     * @param {*} hostFilter - raw string, comma separated strings, or regular expression pattern \r\n     * @param {*} sensorFilter - raw string, comma separated strings, or regular expression pattern \r\n     * @return {collection} - PRTG data object with channel and sensor properties\r\n     */\r\n    getAllItems(\r\n      groupFilter = \"/.*/\",\r\n      hostFilter = \"/.*/\",\r\n      sensorFilter = \"/.*/\"\r\n    ) {\r\n      return this.getSensors(\r\n        groupFilter,\r\n        hostFilter,\r\n        sensorFilter\r\n      ).then(sensors => {\r\n        /**\r\n         * In this context, if i simply iterate an array with _.each and then execute performPRTGAPIRequest, even\r\n         * though the returned object is a promise which can be used in a chain, the execution falls outside of the existing\r\n         * promise chain and thus executs asynchronously. To keep everything in the same execution context, create a\r\n         * promise array for each object, then execute them in context.\r\n         */\r\n        const promises = _.map(sensors, sensor => {\r\n          const params =\r\n            \"content=channels&columns=sensor,name&id=\" + sensor.objid;\r\n          return this.performPRTGAPIRequest(\r\n            \"table.json\",\r\n            params\r\n          ).then(channels => {\r\n            /**\r\n             * Create an object that contains all of the information necessary to query this metric.\r\n             * This information will be used at render time to group the datapoints and name them.\r\n             */\r\n            return Promise.all(\r\n              _.map(channels, channel => {\r\n                channel.sensor = sensor.objid;\r\n                channel.sensor_raw = sensor.sensor;\r\n                channel.device = sensor.device;\r\n                channel.group = sensor.group;\r\n                channel.channel = channel.name;\r\n                return channel;\r\n              })\r\n            );\r\n          });\r\n        });\r\n        return Promise.all(promises).then(_.flatten);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Retrieve full data object with channel definitions using an optional filter string.\r\n     * The results are then filtered against a channelFilter expression.\r\n     * \r\n     * @param {string} groupFilter - raw string, comma separated strings, or regular expression patter \r\n     * @param {string} deviceFilter - raw string, comma separated strings, or regular expression patter \r\n     * @param {string} sensorFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @param {string} channelFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @param {boolean} invertChannelFilter - if set to boolean true, negates the result of the channelFilter expression\r\n     */\r\n    getItems(\r\n      groupFilter,\r\n      deviceFilter,\r\n      sensorFilter,\r\n      channelFilter,\r\n      invertChannelFilter = false\r\n    ) {\r\n      return this.getAllItems(\r\n        groupFilter,\r\n        deviceFilter,\r\n        sensorFilter\r\n      ).then(items => {\r\n        return this.filterQuery(items, channelFilter, invertChannelFilter);\r\n      });\r\n    }\r\n    getItemsFromTarget(target) {\r\n      if (target.options) {\r\n        if (target.options.invertChannelFilter) {\r\n          return this.getItems(\r\n            target.group.name,\r\n            target.device.name,\r\n            target.sensor.name,\r\n            target.channel.name,\r\n            true\r\n          );\r\n        } else {\r\n          return this.getItems(\r\n            target.group.name,\r\n            target.device.name,\r\n            target.sensor.name,\r\n            target.channel.name\r\n          );\r\n        }\r\n      }\r\n      return this.getItems(\r\n        target.group.name,\r\n        target.device.name,\r\n        target.sensor.name,\r\n        target.channel.name\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Retrieve history data from a single sensor.\r\n     * @param {number} sensor - sensor ID\r\n     * @param {string} channel - channel name\r\n     * @param {number} dateFrom - timestamp of start time\r\n     * @param {number} dateTo - timestamp of end time\r\n     */\r\n    getItemHistory(sensor, channel, dateFrom, dateTo) {\r\n      const hours = (dateTo - dateFrom) / 3600;\r\n      let avg = 0;\r\n      if (hours > 12 && hours < 36) {\r\n        avg = \"300\";\r\n      } else if (hours > 36 && hours < 745) {\r\n        avg = \"3600\";\r\n      } else if (hours > 745) {\r\n        avg = \"86400\";\r\n      }\r\n\r\n      const method = \"historicdata.xml\";\r\n      const params =\r\n        \"id=\" +\r\n        sensor +\r\n        \"&sdate=\" +\r\n        this.getPRTGDate(dateFrom) +\r\n        \"&edate=\" +\r\n        this.getPRTGDate(dateTo) +\r\n        \"&avg=\" +\r\n        avg +\r\n        \"&pctshow=false&pctmode=false\";\r\n      /*\r\n             * Modified to read the \"statusid\" value, this can then be mapped via lookup table to a PRTG status type\r\n             * 1=Unknown, 2=Scanning, 3=Up, 4=Warning, 5=Down, 6=No Probe, 7=Paused by User, 8=Paused by Dependency,\r\n             * 9=Paused by Schedule, 10=Unusual, 11=Not Licensed, 12=Paused Until, 13=Down Acknowledged, 14=Down Partial\r\n             */\r\n      const history = [];\r\n      return this.performPRTGAPIRequest(method, params).then(results => {\r\n        if (!results.histdata) {\r\n          return history;\r\n        }\r\n        const rCnt = results.histdata.item.length;\r\n        const testdata = results.histdata.item[0];\r\n        let chanIndex = 0;\r\n\r\n          \r\n        if (\r\n          testdata.value_raw &&\r\n          testdata.value_raw.length > 0\r\n        )\r\n        {\r\n          //try to get idx numbers on first row, saves cycles.\r\n          for (let idx = 0; idx < testdata.value_raw.length; idx++) {\r\n            // this hack specifically applies to bandwidth sensors that track speed AND volume, a better solution remains to be implemented.\r\n            if (testdata.value_raw[idx].channel.match(channel + \" [(]speed[)]\") || testdata.value_raw[idx].channel == channel)\r\n            {\r\n              chanIndex = idx;\r\n            }\r\n            // \r\n            else\r\n            {\r\n              let rex = new RegExp(utils.escapeRegex(channel), 'g');\r\n              if (rex.test(testdata.value_raw[idx].channel)) {\r\n                chanIndex = idx;\r\n              }\r\n            } \r\n          }\r\n        }\r\n        \r\n\r\n        for (let iter = 0; iter < rCnt; iter++) {\r\n          let val;\r\n          const prtgDate = results.histdata.item[iter].datetime_raw;\r\n          const dt = new Date((prtgDate - 25569) * 86400 * 1000);\r\n          //var dt = Math.round((results.histdata.item[i].datetime_raw - 25568) * 86400,0) * 1000;\r\n          if (\r\n            results.histdata.item[iter].value_raw &&\r\n              results.histdata.item[iter].value_raw.length > 0\r\n          ) {\r\n            //FIXME: better way of dealing with multiple channels of same name\r\n            //IE you select \"Traffic In\" but PRTG provides Volume AND Speed channels.\r\n          /*\r\n            for (\r\n              let iter2 = 0;\r\n              iter2 < results.histdata.item[iter].value_raw.length;\r\n              iter2++\r\n            ) {\r\n              //workaround for SNMP Bandwidth Issue #3. Check for presence of (speed) suffix, and use that.\r\n               if (\r\n                results.histdata.item[iter].value_raw[iter2].channel.match(\r\n                  channel + \" [(]speed[)]\"\r\n                ) ||\r\n                  results.histdata.item[iter].value_raw[iter2].channel == channel\r\n              )\r\n              {\r\n                val = Number(results.histdata.item[iter].value_raw[iter2].text);\r\n              }\r\n              */\r\n            val = Number(results.histdata.item[iter].value_raw[chanIndex].text);\r\n          //            }\r\n          } else if (results.histdata.item[iter].value_raw) {\r\n            val = Number(results.histdata.item[iter].value_raw.text);\r\n          }\r\n          history.push({\r\n            sensor: sensor,\r\n            channel: channel,\r\n            datetime: dt,\r\n            value: val\r\n          });\r\n        }\r\n        return history;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Retrieve messages for a given sensor. Used only for annotation queries.\r\n     * \r\n     * @param {number} from - Earliest time in range\r\n     * @param {number} to - Latest time in range\r\n     * @param {number} sensorId - Numeric ID of Sensor \r\n     */\r\n    getMessages(from, to, sensorId) {\r\n      const method = \"table.json\";\r\n      const params =\r\n        \"&content=messages&columns=objid,datetime,parent,type,name,status,message&id=\" +\r\n        sensorId;\r\n      return this.performPRTGAPIRequest(method, params).then(function(\r\n        messages\r\n      ) {\r\n        const events = [];\r\n        let time = 0;\r\n        _.each(messages, function(message) {\r\n          time = Math.round((message.datetime_raw - 25569) * 86400, 0);\r\n          if (time > from && time < to) {\r\n            events.push({\r\n              time: time * 1000,\r\n              title: message.status,\r\n              text:\r\n                \"<p>\" +\r\n                message.parent +\r\n                \"(\" +\r\n                message.type +\r\n                \") Message:<br>\" +\r\n                message.message +\r\n                \"</p>\"\r\n            });\r\n          }\r\n        });\r\n        return events;\r\n      });\r\n    }\r\n  }\r\n  return PRTGAPI;\r\n}\r\n\r\n//register a new module\r\nangular.module(\"grafana.services\").factory(\"PRTGAPIService\", PRTGAPIService);\r\n"]}